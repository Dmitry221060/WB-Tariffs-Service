networks:
  postgres-net:
    driver: bridge

volumes:
  postgres-vol:
    driver: local

secrets:
  google_service_account:
    file: ${GOOGLE_API_KEYFILE}

services:
  postgres:
    container_name: postgres
    image: postgres:16.1-alpine
    environment:
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-vol:/var/lib/postgresql/data
    networks:
      - postgres-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile
    secrets:
      - google_service_account
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APP_PORT: ${APP_PORT}
      NODE_ENV: production
      GOOGLE_API_KEYFILE: /run/secrets/google_service_account
      WB_API_KEY: ${WB_API_KEY}
      WORKER_QUERY_INTERVAL: ${WORKER_QUERY_INTERVAL}
      FORMAT_EXPORT: ${FORMAT_EXPORT:-true}
    ports:
      - ${APP_PORT}:${APP_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres-net
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 5
    command: [ "npm", "run", "start:prod" ]
    healthcheck:
      test: curl --fail http://localhost:${APP_PORT}/healthz
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped
